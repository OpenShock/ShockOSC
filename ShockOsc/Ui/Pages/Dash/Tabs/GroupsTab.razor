@using System.Globalization
@using System.Text.RegularExpressions
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using OpenShock.Desktop.ModuleBase.Config
@using OpenShock.ShockOSC.Config
@using OpenShock.ShockOSC.Services
@using OpenShock.ShockOSC.Ui.Utils
@using Group = OpenShock.ShockOSC.Config.Group

@page "/dash/groups"

@code {
    
    [ModuleInject] private IModuleConfig<ShockOscConfig> ModuleConfig { get; set; } = null!;
    [ModuleInject] private ShockOsc ShockOsc { get; set; } = null!;
    [ModuleInject] private IOpenShockService OpenShock { get; set; } = null!;

    private Guid? _group = null;

    public Guid? Group
    {
        get => _group;
        set
        {
            _group = value;
            OnGroupSelect();
        }
    }

    public async Task AddGroup()
    {
        var groupId = Guid.NewGuid();
        ModuleConfig.Config.Groups.Add(groupId, new Group { Name = "New Group" });
        Group = groupId;

        await InvokeAsync(StateHasChanged);
        ModuleConfig.SaveDeferred();
        ShockOsc.RaiseOnGroupsChanged();
    }

    public async Task DeleteGroup()
    {
        if (Group == null) return;

        ModuleConfig.Config.Groups.Remove(Group.Value);
        Group = null;
        await InvokeAsync(StateHasChanged);
        ModuleConfig.SaveDeferred();
        ShockOsc.RaiseOnGroupsChanged();
    }

    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
        ShockOsc.RaiseOnGroupsChanged();
    }

    private void OnGroupSettingsValueChange()
    {
        if (CurrentGroup != null)
        {
            CurrentGroup.BoneHeldDurationLimit = _limitBoneHeldDurationEnabled ? _limitBoneHeldDuration : null;
        }

        ModuleConfig.SaveDeferred();
    }

    private void OnGroupSelect()
    {
        if (CurrentGroup != null) _selectedShockers = [..CurrentGroup.Shockers];

        InvokeAsync(StateHasChanged);
    }

    private void OnSelectedShockersUpdate()
    {
        if (CurrentGroup != null)
        {
            CurrentGroup.Shockers = _selectedShockers.ToList();
            ModuleConfig.SaveDeferred();
        }
    }

    private Group? CurrentGroup => Group == null ? null : ModuleConfig.Config.Groups.TryGetValue(Group.Value, out var group) ? group : null;

    private static Regex _nameRegex = new Regex(@"^[a-zA-Z0-9\/\\ -]+$", RegexOptions.Compiled);

    private string NameValidation(string name)
    {
        if (string.IsNullOrEmpty(name)) return "Name cannot be empty";
        if (name.Length > 30) return "Name cannot be longer than 30 characters";
        if (!_nameRegex.IsMatch(name)) return "Can only contain letters, numbers, and /\\- characters, this is due to unity animator parameters restrictions";
        return string.Empty;
    }

    private HashSet<Guid> _selectedShockers = [];


    private string CurrentRandomIntensityString
    {
        get => CurrentGroup?.RandomIntensity ?? false ? "Random Intensity" : "Fixed Intensity";
        set
        {
            if (CurrentGroup == null) return;
            CurrentGroup.RandomIntensity = value == "Random Intensity";
        }
    }

    private string CurrentRandomDurationString
    {
        get => CurrentGroup?.RandomDuration ?? false ? "Random Duration" : "Fixed Duration";
        set
        {
            if (CurrentGroup == null) return;
            CurrentGroup.RandomDuration = value == "Random Duration";
        }
    }

    private async Task ResetIntensity()
    {
        if (CurrentGroup == null) return;
        CurrentGroup.FixedIntensity = ModuleConfig.Config.Behaviour.FixedIntensity;
        CurrentGroup.IntensityRange = ModuleConfig.Config.Behaviour.IntensityRange;
        CurrentGroup.RandomIntensity = ModuleConfig.Config.Behaviour.RandomIntensity;

        await InvokeAsync(StateHasChanged);
        ModuleConfig.SaveDeferred();
    }

    private async Task ResetDuration()
    {
        if (CurrentGroup == null) return;
        CurrentGroup.FixedDuration = ModuleConfig.Config.Behaviour.FixedDuration;
        CurrentGroup.DurationRange = ModuleConfig.Config.Behaviour.DurationRange;
        CurrentGroup.RandomDuration = ModuleConfig.Config.Behaviour.RandomDuration;

        await InvokeAsync(StateHasChanged);
        ModuleConfig.SaveDeferred();
    }

    private uint _limitBoneHeldDuration;
    private bool _limitBoneHeldDurationEnabled;

    protected override void OnInitialized()
    {
        _limitBoneHeldDurationEnabled = ModuleConfig.Config.Behaviour.BoneHeldDurationLimit.HasValue;
        _limitBoneHeldDuration = ModuleConfig.Config.Behaviour.BoneHeldDurationLimit ?? 2000;
    }

}

<MudButton OnClick="AddGroup" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add New Group</MudButton>
<MudButton OnClick="DeleteGroup" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete Group</MudButton>
<br/> <br/>
<MudSelect Variant="Variant.Outlined" T="Guid?" Label="Select Group" Dense="true" Margin="Margin.Dense" @bind-Value="Group" Clearable>
    @foreach (var group in ModuleConfig.Config.Groups)
    {
        <MudSelectItem T="Guid?" Value="@group.Key">@group.Value.Name</MudSelectItem>
    }
</MudSelect>

@if (CurrentGroup != null)
{
    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudText>Group Settings</MudText>
        <MudDivider/>
        <br/>

        <MudTextField Label="Group Name" Validation="@(new Func<string, string>(NameValidation))" DebounceInterval="250" @bind-Value="@CurrentGroup.Name" @bind-Value:after="OnSettingsValueChange"/>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudCheckBox Class="checkbox-title" @bind-Value="@CurrentGroup.OverrideIntensity" Label="Override Intensity Settings" @bind-Value:after="OnGroupSettingsValueChange"/>
        <MudDivider/>
        <MudCollapse Expanded="CurrentGroup.OverrideIntensity">
            <br/>

            <div class="d-flex" style="justify-content: space-between">

                <MudToggleGroup T="string" @bind-Value="CurrentRandomIntensityString" Style="width: 330px; margin: 0 0 0 10px;"
                                Delimiters="true" CheckMark="false" FixedContent="false" @bind-Value:after="OnGroupSettingsValueChange">
                    <MudToggleItem Value="@("Fixed Intensity")"/>
                    <MudToggleItem Value="@("Random Intensity")"/>
                </MudToggleGroup>
                <MudButton OnClick="ResetIntensity" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LockReset" Color="Color.Primary">Reset</MudButton>
            </div>
            <br/>
            @if (!CurrentGroup.RandomIntensity)
            {
                <DebouncedSlider T="byte" Size="Size.Large" Min="0" Max="100" Class="openshock-slider-length" @bind-SliderValue="@CurrentGroup.FixedIntensity"
                                 OnSaveAction="_ => ModuleConfig.SaveDeferred()">
                    Intensity: @CurrentGroup.FixedIntensity%
                </DebouncedSlider>
            }
            else
            {
                <DebouncedSlider T="byte" Size="Size.Large" Min="0" Max="100" Class="openshock-slider-length" @bind-SliderValue="@CurrentGroup.IntensityRange.Min"
                                 OnValueChanged="u => { if (CurrentGroup.IntensityRange.Max < u) CurrentGroup.IntensityRange.Max = u; }"
                                 OnSaveAction="_ => ModuleConfig.SaveDeferred()">
                    Min Intensity: @CurrentGroup.IntensityRange.Min%
                </DebouncedSlider>

                <DebouncedSlider T="byte" Size="Size.Large" Min="0" Max="100" Class="openshock-slider-length" @bind-SliderValue="@CurrentGroup.IntensityRange.Max"
                                 OnValueChanged="u => { if (CurrentGroup.IntensityRange.Min > u) CurrentGroup.IntensityRange.Min = u; }"
                                 OnSaveAction="_ => ModuleConfig.SaveDeferred()">
                    Max Intensity: @CurrentGroup.IntensityRange.Max%
                </DebouncedSlider>
            }

        </MudCollapse>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudCheckBox Class="checkbox-title" @bind-Value="@CurrentGroup.OverrideDuration" Label="Override Duration Settings" @bind-Value:after="OnGroupSettingsValueChange"/>
        <MudDivider/>
        <MudCollapse Expanded="CurrentGroup.OverrideDuration">
            <br/>

            <div class="d-flex" style="justify-content: space-between">

                <MudToggleGroup T="string" @bind-Value="CurrentRandomDurationString" Style="width: 330px; margin: 0 0 0 10px;"
                                Delimiters="true"  CheckMark="false" FixedContent="false" @bind-Value:after="OnGroupSettingsValueChange">
                    <MudToggleItem Value="@("Fixed Duration")"/>
                    <MudToggleItem Value="@("Random Duration")"/>
                </MudToggleGroup>
                <MudButton OnClick="ResetDuration" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LockReset" Color="Color.Primary">Reset</MudButton>
            </div>
            <br/>
            @if (!CurrentGroup.RandomDuration)
            {
                <DebouncedSlider T="ushort" Size="Size.Large" Class="openshock-slider-length" @bind-SliderValue="@CurrentGroup.FixedDuration"
                                 OnSaveAction="_ => ModuleConfig.SaveDeferred()"
                                 Min="300" Max="30000" Step="100">
                    Duration: @MathF.Round(CurrentGroup.FixedDuration / 1000f, 1).ToString(CultureInfo.InvariantCulture)s
                </DebouncedSlider>
            }
            else
            {
                <DebouncedSlider T="ushort" Size="Size.Large" Class="openshock-slider-length" @bind-SliderValue="@CurrentGroup.DurationRange.Min"
                                 OnValueChanged="u => { if (CurrentGroup.DurationRange.Max < u) CurrentGroup.DurationRange.Max = u; }"
                                 OnSaveAction="_ => ModuleConfig.SaveDeferred()"
                                 Min="300" Max="30000" Step="100">
                    Min Duration: @MathF.Round(CurrentGroup.DurationRange.Min / 1000f, 1).ToString(CultureInfo.InvariantCulture)s
                </DebouncedSlider>

                <DebouncedSlider T="ushort" Size="Size.Large" Class="openshock-slider-length" @bind-SliderValue="@CurrentGroup.DurationRange.Max"
                                 OnValueChanged="u => { if (CurrentGroup.DurationRange.Min > u) CurrentGroup.DurationRange.Min = u; }"
                                 OnSaveAction="_ => ModuleConfig.SaveDeferred()"
                                 Min="300" Max="30000" Step="100">
                    Max Duration: @MathF.Round(CurrentGroup.DurationRange.Max / 1000f, 1).ToString(CultureInfo.InvariantCulture)s
                </DebouncedSlider>
            }

        </MudCollapse>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudCheckBox Class="checkbox-title" @bind-Value="@CurrentGroup.OverrideCooldownTime" Label="Override Cooldown Time" @bind-Value:after="OnGroupSettingsValueChange"/>
        <MudDivider/>
        <MudCollapse Expanded="CurrentGroup.OverrideCooldownTime">
            <br/>

            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="CurrentGroup.CooldownTime" Label="Cooldown Time" @bind-Value:after="OnGroupSettingsValueChange"/>

        </MudCollapse>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudCheckBox Class="checkbox-title" @bind-Value="@CurrentGroup.OverrideBoneHeldAction" Label="Override PhysBone Held Action" @bind-Value:after="OnGroupSettingsValueChange"/>
        <MudDivider/>
        <MudCollapse Expanded="CurrentGroup.OverrideBoneHeldAction">
            <br/>

            <MudSelect Class="option-width" @bind-Value="CurrentGroup.WhileBoneHeld" Label="When PhysBone Held" @bind-Value:after="OnGroupSettingsValueChange">
                @foreach (var boneHeldAction in BoneActionExtensions.BoneActions)
                {
                    <MudSelectItem Value="@boneHeldAction">@boneHeldAction</MudSelectItem>
                }
            </MudSelect>
        </MudCollapse>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudCheckBox Class="checkbox-title" @bind-Value="@CurrentGroup.OverrideBoneReleasedAction" Label="Override PhysBone Release Action" @bind-Value:after="OnGroupSettingsValueChange"/>
        <MudDivider/>
        <MudCollapse Expanded="CurrentGroup.OverrideBoneReleasedAction">
            <br/>

            <MudSelect Class="option-width" @bind-Value="CurrentGroup.WhenBoneReleased" Label="When PhysBone Released" @bind-Value:after="OnGroupSettingsValueChange">
                @foreach (var boneReleasedAction in BoneActionExtensions.BoneActions)
                {
                    <MudSelectItem Value="@boneReleasedAction">@boneReleasedAction</MudSelectItem>
                }
            </MudSelect>
        </MudCollapse>
    </MudPaper>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudCheckBox Class="checkbox-title" @bind-Value="@CurrentGroup.OverrideBoneHeldDurationLimit" Label="Override PhysBone Held Duration Limit" @bind-Value:after="OnGroupSettingsValueChange"/>
        <MudDivider/>
        <MudCollapse Expanded="CurrentGroup.OverrideBoneHeldDurationLimit">
            <div style="display: flex; width: 600px; padding-top: 20px;">
                <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="_limitBoneHeldDurationEnabled" Label="Limit Physbone held duration" @bind-Value:after="OnGroupSettingsValueChange"/>
                <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="_limitBoneHeldDuration" Label="Limit Duration (ms)" Disabled="!_limitBoneHeldDurationEnabled" @bind-Value:after="OnGroupSettingsValueChange"/>
            </div>
        </MudCollapse>
    </MudPaper>


    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudText>Shockers in Group</MudText>
        <MudDivider/>
        <br/>

        <MudTable Elevation="0" Height="300px" T="Guid" Items="OpenShock.Data.Hubs.Value.SelectMany(x => x.Shockers).Select(x => x.Id)" MultiSelection="true" Hover="true" @bind-SelectedItems="@_selectedShockers" @bind-SelectedItems:after="OnSelectedShockersUpdate">
            <HeaderContent>
                <MudTh>Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@OpenShock.Data.Hubs.Value.SelectMany(x => x.Shockers).First(x => x.Id == context).Name</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}
else
{
    <MudPaper Outlined="true" Class="rounded-lg" Style="padding: 10px 15px; margin: 20px 0;">
        <MudText Typo="Typo.h6">Please select a group to edit</MudText>
    </MudPaper>
}

<style>
    .checkbox-title {
        margin: -10px !important;
        padding: 0 !important;
    }
</style>